name: Deploy to aws

on:
  push:
    branches:
    - master
jobs:
  deploy-to-aws:
    name: deploy-to-aws
    runs-on: ubuntu-latest
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    steps:
    - uses: actions/checkout@v1

    - name: install venv
      uses: actions/setup-python@v2
      with:
        python-version: '3.6.10'
    - name: Get req & pem & tfvar & sql file
      uses: chrislennon/action-aws-cli@v1.1
    - run: |
        aws s3 cp s3://comiccrawler-data/v3/req.json .
        aws s3 cp s3://comiccrawler-data/v3/tocms.pem .
        aws s3 cp s3://comiccrawler-data/v3/comic-db.pem .
        aws s3 cp s3://comiccrawler-data/v3/terraform.tfvars env/v3_lambda_ec2
        aws s3 cp s3://comiccrawler-data/v3/prod_db_build.sql env
      env:
        AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Run crawler test
      uses: addnab/docker-run-action@v3
      with:
        image: ${{ secrets.DOCKERHUB_USERNAME }}/comiccrawler_image:v1
        options: -v ${{ github.workspace }}:/project
        run: |
          cd /project;
          chmod 600 tocms.pem;

          export cmd=$( cat <<-EOF
            ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -D8079 -N \
                -p${{ secrets.PROXY_PORT }} -4 -i /project/tocms.pem \
                ${{ secrets.PROXY_USER }}@${{ secrets.PROXY_HOST }} &
          EOF
          )

          echo -e "$cmd" >> /proxy_launch.sh && chmod 755 /proxy_launch.sh
          /proxy_launch.sh
          python3 tests/crawling_doer_tests.py;

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Set up for Amazon ECR
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1
    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1
    - name: Install mysql client
      run: sudo apt-get update && sudo apt-get install -y mysql-client-8.0
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
          cli_config_credentials_hostname: 'app.terraform.io'
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    - name: Run terraform
      run: |
        cd env/v3_lambda_ec2
        terraform init
        terraform plan -out dev.tfplan
        terraform apply dev.tfplan || touch build_failed.txt
        if [ -f "build_failed.txt" ]
        then
          terraform plan -destroy -out destroy.tfplan && terraform apply destroy.tfplan
          exit 1
        fi
